package com.wuxianedu.controller;

import java.io.UnsupportedEncodingException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.stereotype.Controller;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.wuxianedu.domain.Student;
import com.wuxianedu.domain.StudentSelfUpdateBean;
import com.wuxianedu.exception.SelectStudentException;
import com.wuxianedu.exception.SystemException;
import com.wuxianedu.service.StudentService;

@Controller
public class StudentInfoAndOperationHandler {
	
	@Resource
	private StudentService studentService;
	
	@RequestMapping("showSelfInfo")
	public ModelAndView showSelfInfo(HttpSession session){
		ModelAndView mav=new ModelAndView();
		Student student=(Student) session.getAttribute("studentInfo");
		try {
			student=studentService.lookStu(student.getPhone(), student.getPassword());
		} catch (SystemException e) {
			e.printStackTrace();
		} catch (SelectStudentException e) {
			e.printStackTrace();
		}
		System.out.println(student);
		mav.addObject("studentInfo", student);
		mav.setViewName("showStudentInfo");
		return mav;
	}
	
	@RequestMapping("updateAndShowSelfInfo")
	public ModelAndView updateAndShowSelfInfo( HttpSession session){
		ModelAndView mav=new ModelAndView();
		StudentInfoAndOperationHandler siah=new StudentInfoAndOperationHandler();
		StudentSelfUpdateBean studentSelfUpdateBean=new StudentSelfUpdateBean();
		Student student=(Student) session.getAttribute("studentInfo");
		try {
			student=studentService.findStudent(student.getSid());
		} catch (SystemException e) {
			e.printStackTrace();
		} catch (SelectStudentException e) {
			e.printStackTrace();
		}
		studentSelfUpdateBean.setBirthday(siah.getStringTime(student.getBirthday()));
		studentSelfUpdateBean.setGender(student.getGender());
		studentSelfUpdateBean.setNativePlace(student.getNativePlace());
		studentSelfUpdateBean.setPassword(student.getPassword());
		studentSelfUpdateBean.setPhone(student.getPhone());
		studentSelfUpdateBean.setStudentName(student.getStudentName());
		mav.addObject("studentSelfUpdateBean", studentSelfUpdateBean);
		mav.setViewName("studentUpdateSelfInfo");
		return mav;
	}

	@RequestMapping("updateStudentInfo")
	public String updateStudentInfo(@Valid @ModelAttribute("studentSelfUpdateBean") StudentSelfUpdateBean studentSelfUpdateBean,Errors errors,HttpSession session){
		StudentInfoAndOperationHandler siah=new StudentInfoAndOperationHandler();
		studentSelfUpdateBean.setStudentName(siah.encodeStr(studentSelfUpdateBean.getStudentName()));
		studentSelfUpdateBean.setGender(siah.encodeStr(studentSelfUpdateBean.getGender()));
		studentSelfUpdateBean.setNativePlace(siah.encodeStr(studentSelfUpdateBean.getNativePlace()));
		if(errors.hasErrors()){
			return "studentUpdateSelfInfo";
		}
		Student student=(Student) session.getAttribute("studentInfo");
		student.setStudentName(studentSelfUpdateBean.getStudentName());
		student.setBirthday(siah.getTime(studentSelfUpdateBean.getBirthday()));
		student.setGender(studentSelfUpdateBean.getGender());
		student.setPhone(studentSelfUpdateBean.getPhone());
		student.setNativePlace(studentSelfUpdateBean.getNativePlace());
		student.setPassword(studentSelfUpdateBean.getPassword());
		try {
			studentService.updateStu(student);
		} catch (SystemException e) {
			e.printStackTrace();
		}
		
		Student student1=null;
		try {
			student1=(Student) session.getAttribute("studentInfo");
			student1=studentService.findStudent(student.getSid());
		} catch (SystemException e) {
			e.printStackTrace();
		} catch (SelectStudentException e) {
			e.printStackTrace();
		}
		
		session.setAttribute("studentInfo", student1);
		return "forward:showSelfInfo.do";
	}
	
	public Date getTime(String date){
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
		java.util.Date date1=null;
		try {
			date1 = sdf.parse(date);
		} catch (ParseException e) {
			e.printStackTrace();
		}  
		return date1;
	}
	
	public String getStringTime(Date date){
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
		String date1=sdf.format(date);
		return date1;
	}
	
 
	    public  String encodeStr(String str) {  
	    	if(str==null||"".equals(str)){
	    		return "";
	    	}
	        try {  
	            return new String(str.getBytes("ISO-8859-1"), "UTF-8");  
	        } catch (UnsupportedEncodingException e) {  
	            e.printStackTrace();  
	            return null;  
	        }  
	    }  
	 
	
}
