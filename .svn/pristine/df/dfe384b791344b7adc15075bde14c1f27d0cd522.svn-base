package com.wuxianedu.service;

import java.util.List;
import java.util.Set;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.wuxianedu.domain.Item;
import com.wuxianedu.domain.Paper;
import com.wuxianedu.domain.PaperCondition;
import com.wuxianedu.exception.PaperException;
import com.wuxianedu.exception.SystemException;
import com.wuxianedu.mapper.ItemMapper;
import com.wuxianedu.mapper.PaperMapper;

@Service
public class PaperService {
	
	@Resource
	private PaperMapper paperMapper;
	
	@Resource
	private ItemMapper itemMapper;
	
	// 查找所有试卷
	public List<Paper> findAllPaper() throws PaperException, SystemException{
		List<Paper> papers = null;
		try {
			papers = paperMapper.findAllPaper();
			
		} catch (Exception e) {
			throw new SystemException("系统错误");
		}
		if(papers == null){
			throw new PaperException("没有试卷");
		}
		return papers;
	}
	
	// 预览试卷
	public Paper findPaperAndItem(Paper paper) throws PaperException, SystemException{
		Paper papers = null;
		try {
			papers = paperMapper.findPaperAndItem(paper);
			
		} catch (Exception e) {
			throw new SystemException("系统错误");
		}
		if(papers == null){
			throw new PaperException("没有试卷");
		}
		return papers;
	}
	
	// 根据条件查询试卷
	public List<Paper> findPaperByNameOrTypes(PaperCondition paperCondition) throws PaperException, SystemException{
		List<Paper> papers = null;
		try {
			papers = paperMapper.findPaperByNameOrTypes(paperCondition);
			
		} catch (Exception e) {
			throw new SystemException("系统错误");
		}
		if(papers == null){
			throw new PaperException("没有同类型或同名的试卷");
		}
		return papers;
	}
	
	// 创建新的试卷
	@Transactional(propagation=Propagation.REQUIRED, rollbackFor={SystemException.class})
	public void createPaper(Paper paper) throws SystemException{
		try {
			// 创建一个paper记录  并将插入后生成的主键返还至参数
			paperMapper.createBlankPaper(paper);
			Set<Item> items = itemMapper.findItemCreatePaper(paper);
			PaperCondition paperCondition = new PaperCondition();
			for (Item item : items) {
				paperCondition.setPid(paper.getPid());
				paperCondition.setIid(item.getIid());
				paperMapper.createPaper(paperCondition);
			}
		} catch (Exception e) {
			throw new SystemException("系统错误");
		}
	}
	
	// 修改试卷
	@Transactional(propagation=Propagation.REQUIRED, rollbackFor={SystemException.class})
	public void updatePaper(Paper paper) throws SystemException{
		try {
			paperMapper.updatePaper(paper);
		} catch (Exception e) {
			throw new SystemException("系统错误");
		}
	}
}
